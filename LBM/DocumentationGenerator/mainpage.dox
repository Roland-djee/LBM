/*! \mainpage C++ Lattice-Boltzmann Method for mesoscopic fluid dynamics
 *   	
 *
 * \section intro_sec Introduction
 *
 * This is a Single Component Single Phase (SCSP) D3Q19 class Lattice-Boltzmann code developed in C++ and intended to use CPU parallelism (OpenMP, MPI) 
 * and GPU acceleration (OpenACC, CUDA). It is largely inspired from the C++ code by Dr. Christos Tsotskas, 
 * which itself comes from the Fortran code by Prof. Djenidi (University of Newcastle, Australia).
 * 
 * \section requirements Requirements
 * This code has been developed under Eclipse/CDT with the gcc compiler. The documentation is auto-generated using Doxygen.
 * Software requirements are:
 *	- Eclipse/CDT
 *  - Git
 *	- GCC
 *  - Doxygen and <a href="http://www.mantidproject.org/Eclipse_Doxygen_Setup">Eclox </a>
 *
 *
 * \section install_sec Installation
 * Clone the GitHub repository:
 * @code git clone https://github.com/UCLGuichard/LBM.git @endcode
 * 
 *
 * \section documentation Generating the documentation
 * The simplest is to use Eclox plug-in for Eclipse. Open the LBM.doxyfile and press the blue \@ button to build it.
 * This will generate the documentation both in pdf (Latex) and html in the respective folders. Open the latter with your web browser.
 *
 *
 * \section testing Unit testing using googletest
 * Unit tests are developed in the UnitTest folder. In order to run them and avoid conflicting two main functions 
 * (one for the LBM app and the other for testing) simply exclude the main.cpp from the build for running the tests.
 * Then, check the gtest and include folders to the UnitTest path:
 * @code
 * UnitTest >> right-click >> Properties >> C/C++ Build >> Settings >> C++ Compiler >> Includes >> Includepaths (-l) >> workspace (and gtest and include and any folder you may need to include for testing)
 * @endcode
 * Check the gtest folder to the gtest path:
 * @code
 * gtest >> right-click >> Properties >> C/C++ Build >> Settings >> C++ Compiler >> Includes >> Includepaths (-l) >> workspace (and gtest)
 * @endcode
 * Check the gtest folder to the src path:
 * @code
 * src >> right-click >> Properties >> C/C++ Build >> Settings >> C++ Compiler >> Includes >> Includepaths (-l) >> workspace (and gtest)
 * @endcode
 * This is because some part of unit testing LBM private members are LBM methods.
 *
 * \section building Building the code
 * Check the include folder to the src path:
 * @code
 * src >> right-click >> Properties >> C/C++ Build >> Settings >> C++ Compiler >> Includes >> Includepaths (-l) >> workspace (include and any folder you may need to include for building)
 * @endcode
 *
 * \section licence Licence
 *
 * \section contribution Contribution
 * 
 * \section contact Contact: 
 * Dr. Roland Guichard r.guichard@ucl.ac.uk
 */